"""
DOCX to XML Converter Application
Chuy·ªÉn ƒë·ªïi file DOCX sang XML theo c·∫•u tr√∫c c√¢u h·ªèi
"""

import sys
import os
from pathlib import Path
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QPushButton, QLabel, QListWidget, 
                             QFileDialog, QProgressBar, QTextEdit, QGroupBox,
                             QMessageBox, QSplitter)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont, QIcon
import traceback

from docx_processor import DocxProcessor


class ProcessingThread(QThread):
    """Thread x·ª≠ l√Ω file ƒë·ªÉ kh√¥ng block UI"""
    progress = pyqtSignal(str)  # Th√¥ng b√°o ti·∫øn tr√¨nh
    finished = pyqtSignal(bool, str)  # K·∫øt qu·∫£: (success, message)
    file_progress = pyqtSignal(int, int)  # (current_file, total_files)
    
    def __init__(self, input_files, output_dir):
        super().__init__()
        self.input_files = input_files
        self.output_dir = output_dir
        self.processor = DocxProcessor()
        
    def run(self):
        try:
            total_files = len(self.input_files)
            success_count = 0
            
            for idx, input_file in enumerate(self.input_files, 1):
                self.file_progress.emit(idx, total_files)
                
                file_name = Path(input_file).stem
                self.progress.emit(f"üîÑ ƒêang x·ª≠ l√Ω: {file_name}.docx...")
                
                try:
                    # X·ª≠ l√Ω file
                    xml_content = self.processor.process_docx(input_file)
                    
                    # L∆∞u file XML
                    output_file = os.path.join(self.output_dir, f"{file_name}.xml")
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write(xml_content)
                    
                    self.progress.emit(f"‚úÖ Ho√†n th√†nh: {file_name}.xml")
                    success_count += 1
                    
                except Exception as e:
                    error_msg = f"‚ùå L·ªói khi x·ª≠ l√Ω {file_name}.docx: {str(e)}"
                    self.progress.emit(error_msg)
                    self.progress.emit(f"   Chi ti·∫øt: {traceback.format_exc()}")
            
            # Th√¥ng b√°o k·∫øt qu·∫£
            if success_count == total_files:
                self.finished.emit(True, 
                    f"‚úÖ X·ª≠ l√Ω th√†nh c√¥ng {success_count}/{total_files} file!")
            elif success_count > 0:
                self.finished.emit(True, 
                    f"‚ö†Ô∏è X·ª≠ l√Ω th√†nh c√¥ng {success_count}/{total_files} file. "
                    f"C√≥ {total_files - success_count} file l·ªói.")
            else:
                self.finished.emit(False, 
                    "‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!")
                
        except Exception as e:
            self.finished.emit(False, f"‚ùå L·ªói nghi√™m tr·ªçng: {str(e)}")


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.input_files = []
        self.output_dir = ""
        self.processing_thread = None
        self.init_ui()
        
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        self.setWindowTitle("DOCX to XML Converter - C√¥ng c·ª• chuy·ªÉn ƒë·ªïi c√¢u h·ªèi")
        self.setGeometry(100, 100, 1000, 700)
        
        # Widget ch√≠nh
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header_label = QLabel("üìÑ DOCX to XML Converter")
        header_label.setFont(QFont("Arial", 18, QFont.Bold))
        header_label.setAlignment(Qt.AlignCenter)
        header_label.setStyleSheet("""
            QLabel {
                color: #2c3e50;
                padding: 15px;
                background-color: #ecf0f1;
                border-radius: 8px;
            }
        """)
        main_layout.addWidget(header_label)
        
        # Splitter cho 2 ph·∫ßn ch√≠nh
        splitter = QSplitter(Qt.Horizontal)
        
        # ===== PH·∫¶N TR√ÅI: Ch·ªçn file =====
        left_widget = QWidget()
        left_layout = QVBoxLayout(left_widget)
        
        # Group box danh s√°ch file
        file_group = QGroupBox("üìÅ Danh s√°ch file DOCX")
        file_group.setFont(QFont("Arial", 10, QFont.Bold))
        file_layout = QVBoxLayout()
        
        self.file_list = QListWidget()
        self.file_list.setStyleSheet("""
            QListWidget {
                border: 2px solid #3498db;
                border-radius: 5px;
                padding: 5px;
                background-color: white;
            }
        """)
        file_layout.addWidget(self.file_list)
        
        # Buttons cho file
        file_btn_layout = QHBoxLayout()
        
        self.add_files_btn = QPushButton("‚ûï Th√™m file")
        self.add_files_btn.setStyleSheet(self.get_button_style("#3498db"))
        self.add_files_btn.clicked.connect(self.add_files)
        
        self.remove_file_btn = QPushButton("‚ûñ X√≥a file")
        self.remove_file_btn.setStyleSheet(self.get_button_style("#e74c3c"))
        self.remove_file_btn.clicked.connect(self.remove_selected_file)
        
        self.clear_files_btn = QPushButton("üóëÔ∏è X√≥a t·∫•t c·∫£")
        self.clear_files_btn.setStyleSheet(self.get_button_style("#95a5a6"))
        self.clear_files_btn.clicked.connect(self.clear_files)
        
        file_btn_layout.addWidget(self.add_files_btn)
        file_btn_layout.addWidget(self.remove_file_btn)
        file_btn_layout.addWidget(self.clear_files_btn)
        file_layout.addLayout(file_btn_layout)
        
        file_group.setLayout(file_layout)
        left_layout.addWidget(file_group)
        
        # Ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra
        output_group = QGroupBox("üíæ Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£")
        output_group.setFont(QFont("Arial", 10, QFont.Bold))
        output_layout = QVBoxLayout()
        
        self.output_label = QLabel("Ch∆∞a ch·ªçn th∆∞ m·ª•c")
        self.output_label.setStyleSheet("""
            QLabel {
                padding: 10px;
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 5px;
            }
        """)
        self.output_label.setWordWrap(True)
        output_layout.addWidget(self.output_label)
        
        self.select_output_btn = QPushButton("üìÇ Ch·ªçn th∆∞ m·ª•c")
        self.select_output_btn.setStyleSheet(self.get_button_style("#27ae60"))
        self.select_output_btn.clicked.connect(self.select_output_dir)
        output_layout.addWidget(self.select_output_btn)
        
        output_group.setLayout(output_layout)
        left_layout.addWidget(output_group)
        
        # N√∫t x·ª≠ l√Ω
        self.process_btn = QPushButton("üöÄ B·∫ÆT ƒê·∫¶U X·ª¨ L√ù")
        self.process_btn.setFont(QFont("Arial", 12, QFont.Bold))
        self.process_btn.setMinimumHeight(50)
        self.process_btn.setStyleSheet(self.get_button_style("#16a085", 50))
        self.process_btn.clicked.connect(self.start_processing)
        left_layout.addWidget(self.process_btn)
        
        splitter.addWidget(left_widget)
        
        # ===== PH·∫¶N PH·∫¢I: Log v√† ti·∫øn tr√¨nh =====
        right_widget = QWidget()
        right_layout = QVBoxLayout(right_widget)
        
        # Progress bar
        progress_group = QGroupBox("üìä Ti·∫øn tr√¨nh x·ª≠ l√Ω")
        progress_group.setFont(QFont("Arial", 10, QFont.Bold))
        progress_layout = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #3498db;
                border-radius: 5px;
                text-align: center;
                height: 25px;
            }
            QProgressBar::chunk {
                background-color: #3498db;
            }
        """)
        progress_layout.addWidget(self.progress_bar)
        
        self.progress_label = QLabel("S·∫µn s√†ng")
        self.progress_label.setAlignment(Qt.AlignCenter)
        progress_layout.addWidget(self.progress_label)
        
        progress_group.setLayout(progress_layout)
        right_layout.addWidget(progress_group)
        
        # Log area
        log_group = QGroupBox("üìã Nh·∫≠t k√Ω x·ª≠ l√Ω")
        log_group.setFont(QFont("Arial", 10, QFont.Bold))
        log_layout = QVBoxLayout()
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            QTextEdit {
                border: 2px solid #95a5a6;
                border-radius: 5px;
                background-color: #2c3e50;
                color: #ecf0f1;
                font-family: 'Consolas', 'Courier New', monospace;
                font-size: 10pt;
            }
        """)
        log_layout.addWidget(self.log_text)
        
        self.clear_log_btn = QPushButton("üßπ X√≥a log")
        self.clear_log_btn.setStyleSheet(self.get_button_style("#7f8c8d"))
        self.clear_log_btn.clicked.connect(lambda: self.log_text.clear())
        log_layout.addWidget(self.clear_log_btn)
        
        log_group.setLayout(log_layout)
        right_layout.addWidget(log_group)
        
        splitter.addWidget(right_widget)
        
        # Set t·ª∑ l·ªá cho splitter
        splitter.setSizes([400, 600])
        main_layout.addWidget(splitter)
        
        # Status bar
        self.statusBar().showMessage("S·∫µn s√†ng x·ª≠ l√Ω file")
        
    def get_button_style(self, color, height=40):
        """T·∫°o style cho button"""
        return f"""
            QPushButton {{
                background-color: {color};
                color: white;
                border: none;
                padding: 10px;
                border-radius: 5px;
                font-weight: bold;
                min-height: {height}px;
            }}
            QPushButton:hover {{
                background-color: {self.darken_color(color)};
            }}
            QPushButton:pressed {{
                background-color: {self.darken_color(color, 0.8)};
            }}
            QPushButton:disabled {{
                background-color: #bdc3c7;
            }}
        """
    
    def darken_color(self, hex_color, factor=0.9):
        """L√†m t·ªëi m√†u"""
        hex_color = hex_color.lstrip('#')
        r, g, b = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        r, g, b = int(r * factor), int(g * factor), int(b * factor)
        return f"#{r:02x}{g:02x}{b:02x}"
    
    def add_files(self):
        """Th√™m file DOCX"""
        files, _ = QFileDialog.getOpenFileNames(
            self, "Ch·ªçn file DOCX", "", "Word Documents (*.docx)"
        )
        if files:
            for file in files:
                if file not in self.input_files:
                    self.input_files.append(file)
                    self.file_list.addItem(Path(file).name)
            self.log(f"‚úÖ ƒê√£ th√™m {len(files)} file")
            self.statusBar().showMessage(f"ƒê√£ c√≥ {len(self.input_files)} file")
    
    def remove_selected_file(self):
        """X√≥a file ƒë√£ ch·ªçn"""
        current_row = self.file_list.currentRow()
        if current_row >= 0:
            removed = self.input_files.pop(current_row)
            self.file_list.takeItem(current_row)
            self.log(f"üóëÔ∏è ƒê√£ x√≥a: {Path(removed).name}")
            self.statusBar().showMessage(f"C√≤n {len(self.input_files)} file")
    
    def clear_files(self):
        """X√≥a t·∫•t c·∫£ file"""
        if self.input_files:
            reply = QMessageBox.question(
                self, "X√°c nh·∫≠n", 
                "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ file?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                self.input_files.clear()
                self.file_list.clear()
                self.log("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ file")
                self.statusBar().showMessage("Danh s√°ch file tr·ªëng")
    
    def select_output_dir(self):
        """Ch·ªçn th∆∞ m·ª•c ƒë·∫ßu ra"""
        dir_path = QFileDialog.getExistingDirectory(self, "Ch·ªçn th∆∞ m·ª•c l∆∞u file XML")
        if dir_path:
            self.output_dir = dir_path
            self.output_label.setText(dir_path)
            self.log(f"üìÇ Th∆∞ m·ª•c ƒë·∫ßu ra: {dir_path}")
    
    def log(self, message):
        """Th√™m log"""
        self.log_text.append(message)
        self.log_text.verticalScrollBar().setValue(
            self.log_text.verticalScrollBar().maximum()
        )
    
    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"""
        # Validate
        if not self.input_files:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 file DOCX!")
            return
        
        if not self.output_dir:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£!")
            return
        
        # Disable buttons
        self.set_buttons_enabled(False)
        self.progress_bar.setValue(0)
        self.log("\n" + "="*60)
        self.log("üöÄ B·∫ÆT ƒê·∫¶U X·ª¨ L√ù...")
        self.log("="*60)
        
        # Start processing thread
        self.processing_thread = ProcessingThread(self.input_files, self.output_dir)
        self.processing_thread.progress.connect(self.log)
        self.processing_thread.file_progress.connect(self.update_progress)
        self.processing_thread.finished.connect(self.processing_finished)
        self.processing_thread.start()
    
    def update_progress(self, current, total):
        """C·∫≠p nh·∫≠t progress bar"""
        progress = int((current / total) * 100)
        self.progress_bar.setValue(progress)
        self.progress_label.setText(f"ƒêang x·ª≠ l√Ω file {current}/{total}")
        self.statusBar().showMessage(f"Ti·∫øn tr√¨nh: {current}/{total} file")
    
    def processing_finished(self, success, message):
        """X·ª≠ l√Ω xong"""
        self.log("\n" + "="*60)
        self.log(message)
        self.log("="*60 + "\n")
        
        self.progress_bar.setValue(100)
        self.progress_label.setText("Ho√†n th√†nh!")
        self.set_buttons_enabled(True)
        
        # Show message box
        if success:
            QMessageBox.information(self, "Th√†nh c√¥ng", message)
            # M·ªü th∆∞ m·ª•c k·∫øt qu·∫£
            reply = QMessageBox.question(
                self, "M·ªü th∆∞ m·ª•c", 
                "B·∫°n c√≥ mu·ªën m·ªü th∆∞ m·ª•c k·∫øt qu·∫£?",
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                os.startfile(self.output_dir)
        else:
            QMessageBox.critical(self, "L·ªói", message)
    
    def set_buttons_enabled(self, enabled):
        """Enable/disable buttons"""
        self.add_files_btn.setEnabled(enabled)
        self.remove_file_btn.setEnabled(enabled)
        self.clear_files_btn.setEnabled(enabled)
        self.select_output_btn.setEnabled(enabled)
        self.process_btn.setEnabled(enabled)


def main():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()