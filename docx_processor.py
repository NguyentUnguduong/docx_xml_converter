"""
Module x·ª≠ l√Ω chuy·ªÉn ƒë·ªïi DOCX sang XML
D·ª±a tr√™n logic t·ª´ Google Apps Script
"""

import re
import base64
from io import BytesIO
from docx import Document
from docx.oxml.text.paragraph import CT_P
from docx.oxml.table import CT_Tbl
from docx.table import Table
from docx.text.paragraph import Paragraph
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom
from tinhoc_processor import TinHocProcessor

class DocxProcessor:
    """Class ch√≠nh x·ª≠ l√Ω DOCX"""
    
    def __init__(self):
        self.subjects_with_default_titles = [
            "TOANTHPT", "VATLITHPT2", "HOATHPT2", "SINHTHPT2",
            "LICHSUTHPT", "DIALITHPT", "GDCDTHPT2", "NGUVANTHPT",
            "TOANTHCS2", "KHTN", "KHXHTHCS", "GDCDTHCS2", "NGUVANTHCS2"
        ]
        self.tinhoc_subjects = ['TINHOC', 'TINHOCTHCS', 'TINHOCTHPT', 'TINHOC3']
        self.index_question = 0
        self.tinhoc_processor = TinHocProcessor()
        self.nsmap = {
        'a': 'http://schemas.openxmlformats.org/drawingml/2006/main',
        'v': 'urn:schemas-microsoft-com:vml',
        'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships'
    }
        
    def process_docx(self, file_path):
        """X·ª≠ l√Ω file DOCX v√† tr·∫£ v·ªÅ XML string"""
        doc = Document(file_path)
        self.doc = doc  # L∆∞u document ƒë·ªÉ truy c·∫≠p parts
        self.tinhoc_processor.doc = self.doc
        body = doc.element.body
        
        # Parse c√°c elements
        paragraphs = []
        for child in body:
            if isinstance(child, CT_P):
                paragraphs.append(Paragraph(child, doc))
            elif isinstance(child, CT_Tbl):
                paragraphs.append(Table(child, doc))
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c
        list_hl = []
        group_of_questions = []
        current_tag = None
        current_table = None
        content_hl = False
        
        for idx, para in enumerate(paragraphs):
            is_table = isinstance(para, Table)
            
            # X·ª≠ l√Ω table
            if is_table:
                current_table = para
                if group_of_questions and group_of_questions[-1]['questions']:
                    group_of_questions[-1]['questions'].append(current_table)
                continue
            
            # Paragraph r·ªóng
            if len(para.runs) == 0:
                continue
            
            text = para.text.strip()
            
            # Ph√°t hi·ªán header [tag, posttype, level]
            if re.match(r'^\[.*\]$', text):
                header = text.replace('[', '').replace(']', '')
                fields = [f.strip() for f in header.split(',')]
                
                if len(fields) != 3:
                    raise ValueError(f"Sai format header: {text}")
                
                dvkt, posttype, knowledge = fields
                current_tag = dvkt
                
                cap_do = ['NB', 'TH', 'VD', 'VDC']
                knowledge_upper = knowledge.upper()
                level = cap_do.index(knowledge_upper) if knowledge_upper in cap_do else 0
                
                group = {
                    'subject': dvkt.split('_')[0],
                    'tag': dvkt,
                    'original_tag': dvkt,
                    'posttype': posttype,
                    'knowledgelevel': knowledge_upper if knowledge_upper in cap_do else 'NB',
                    'level': level,
                    'questions': []
                }
                
                # Ki·ªÉm tra tr√πng l·∫∑p
                is_duplicate = any(
                    g['subject'] == group['subject'] and
                    g['tag'] == group['tag'] and
                    g['posttype'] == group['posttype'] and
                    g['knowledgelevel'] == group['knowledgelevel']
                    for g in group_of_questions
                )
                
                if not is_duplicate:
                    group_of_questions.append(group)
                
                continue
            
            # Ph√°t hi·ªán h·ªçc li·ªáu
            if text.startswith('HL:'):
                if list_hl:
                    prev_group = group_of_questions[-1]
                    group_of_questions = [{
                        'subject': prev_group['subject'],
                        'tag': prev_group['tag'],
                        'posttype': prev_group['posttype'],
                        'knowledgelevel': prev_group['knowledgelevel'],
                        'level': prev_group['level'],
                        'questions': []
                    }]
                
                hoc_lieu = {
                    'content': [para],
                    'groupOfQ': group_of_questions
                }
                content_hl = True
                list_hl.append(hoc_lieu)
                continue
            
            # Ph√°t hi·ªán c√¢u h·ªèi
            if re.match(r'^C[√¢√¢]u.\d', text, re.IGNORECASE):
                content_hl = False
            
            # Th√™m v√†o content
            if content_hl and list_hl:
                list_hl[-1]['content'].append(para)
                continue
            
            if group_of_questions:
                # G√°n tag cho question
                if hasattr(para, 'current_tag'):
                    para.current_tag = current_tag
                else:
                    para.current_tag = current_tag
                    
                group_of_questions[-1]['questions'].append(para)
        
        # T·∫°o XML
        if list_hl:
            # C√≥ h·ªçc li·ªáu
            root = Element('itemDocuments')
            for idx_hl, hoc_lieu in enumerate(list_hl):
                item_doc = self.create_hoc_lieu_xml(hoc_lieu, idx_hl)
                root.append(item_doc)
        else:
            # Ch·ªâ c√≥ c√¢u h·ªèi
            root = Element('questions')
            self.index_question = 0
            for group in group_of_questions:
                self.format_questions(group, root)
        
        # Convert sang string
        xml_str = self.prettify_xml(root)
        xml_str = self.post_process_xml(xml_str)
        
        return xml_str
    
    def create_hoc_lieu_xml(self, hoc_lieu, index_hl):
        """T·∫°o XML cho h·ªçc li·ªáu"""
        item_doc = Element('itemDocument')
        
        questions_hl = [g for g in hoc_lieu['groupOfQ'] if g['questions']]
        
        sub_id = SubElement(item_doc, 'subjectId')
        sub_id.text = questions_hl[0]['subject'] if questions_hl else ''
        
        know_id = SubElement(item_doc, 'knowledgeId')
        know_id.text = questions_hl[0]['tag'] if questions_hl else ''
        
        group_material = SubElement(item_doc, 'groupQuestionMaterial')
        group_material.text = str(index_hl)
        
        content_html = SubElement(item_doc, 'contentHtml')
        html_content = self.xu_ly_hl(hoc_lieu['content'])
        content_html.text = html_content
        
        list_question = SubElement(item_doc, 'listQuestion')
        for group in questions_hl:
            self.format_questions(group, list_question)
        
        return item_doc
    
    def xu_ly_hl(self, content):
        """X·ª≠ l√Ω n·ªôi dung h·ªçc li·ªáu (gi·ªØ nguy√™n HTML: format, ·∫£nh, b·∫£ng, sub/sup, v.v.)"""
        html_content = ""

        for element in content:
            # N·∫øu l√† b·∫£ng -> chuy·ªÉn nguy√™n b·∫£ng
            if isinstance(element, Table):
                html_content += self.convert_table_to_html(element)
                continue

            # N·∫øu l√† ƒëo·∫°n vƒÉn (Paragraph)
            if isinstance(element, Paragraph):
                paragraph_html = ""
                hl_prefix_removed = False  # ƒë√°nh d·∫•u ƒë√£ b·ªè ti·ªÅn t·ªë HL:

                # D√πng helper _get_image_tags_from_run ƒë·ªÉ l·∫•y image tags (base64)
                for run in element.runs:
                    # 1Ô∏è‚É£ L·∫•y ·∫£nh trong run (n·∫øu c√≥)
                    try:
                        imgs = self._get_image_tags_from_run(run)
                        for img_tag in imgs:
                            paragraph_html += img_tag
                    except Exception:
                        pass

                    # 2Ô∏è‚É£ L·∫•y vƒÉn b·∫£n trong run
                    run_text = run.text
                    if not run_text:
                        continue

                    # üëâ N·∫øu ƒëo·∫°n b·∫Øt ƒë·∫ßu b·∫±ng "HL:" v√† ch∆∞a c·∫Øt, th√¨ c·∫Øt b·ªè lu√¥n
                    if not hl_prefix_removed:
                        run_text = run_text.lstrip()
                        if run_text.startswith("HL:"):
                            run_text = run_text[3:].lstrip()
                            hl_prefix_removed = True

                    # Gi·ªØ ƒë·ªãnh d·∫°ng
                    if run.bold:
                        run_text = f"<strong>{run_text}</strong>"
                    if run.italic:
                        run_text = f"<em>{run_text}</em>"
                    if run.underline:
                        run_text = f"<u>{run_text}</u>"
                    if getattr(run.font, "subscript", False):
                        run_text = f"<sub>{run_text}</sub>"
                    if getattr(run.font, "superscript", False):
                        run_text = f"<sup>{run_text}</sup>"

                    paragraph_html += run_text

                if paragraph_html.strip():
                    html_content += f"{paragraph_html}<br>\n"

        return html_content
        
    def convert_paragraph_to_html(self, paragraph, allow_p=True):
        """Convert paragraph sang HTML, h·ª£p nh·∫•t c√°c run c√≥ c√πng style"""
        parts = []
        prev_style = None
        buffer = ""

        for run in paragraph.runs:
            text = run.text
            if not text.strip():
                continue

            # X√°c ƒë·ªãnh style tuple
            style = (
                bool(run.bold),
                bool(run.italic),
                bool(run.underline),
                bool(run.font.superscript),
                bool(run.font.subscript),
            )

            # N·∫øu style thay ƒë·ªïi, flush buffer
            if prev_style and style != prev_style:
                parts.append(self.wrap_style(buffer, prev_style))
                buffer = ""
            buffer += self.escape_html(text)
            prev_style = style

        # flush cu·ªëi
        if buffer:
            parts.append(self.wrap_style(buffer, prev_style))

        html = "".join(parts)

        # x·ª≠ l√Ω ·∫£nh trong ƒëo·∫°n
        try:
            blips = paragraph._p.xpath('.//a:blip', namespaces={'a': 'http://schemas.openxmlformats.org/drawingml/2006/main'})
            for blip in blips:
                rId = blip.get('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed')
                if rId:
                    img_tag = self._make_img_tag_from_rid(rId)
                    if img_tag:
                        html += img_tag
        except Exception:
            pass

        if allow_p:
            align = paragraph.alignment
            align_map = {0: 'left', 1: 'center', 2: 'right', 3: 'justify'}
            align_style = align_map.get(align, 'left')
            html = f'<p style="text-align:{align_style};">{html}</p>'

        return html

    def wrap_style(self, text, style):
        """ƒê√≥ng g√≥i text v·ªõi style tuple"""
        bold, italic, underline, sup, sub = style
        if bold:
            text = f"<strong>{text}</strong>"
        if italic:
            text = f"<i>{text}</i>"
        if underline:
            text = f"<u>{text}</u>"
        if sup:
            text = f"<sup>{text}</sup>"
        if sub:
            text = f"<sub>{text}</sub>"
        return text
    
    def convert_table_to_html(self, table):
        """Convert table sang HTML (h·ªó tr·ª£ ·∫£nh trong c√°c √¥)"""
        html = "<table class='table-material-question'>"

        for row in table.rows:
            html += '<tr>'
            for cell in row.cells:
                cell_html = ''
                for para in cell.paragraphs:
                    # d√πng convert_paragraph_to_html (ƒë√£ x·ª≠ l√Ω ·∫£nh)
                    cell_html += self.convert_paragraph_to_html(para)
                html += f'<td>{cell_html}</td>'
            html += '</tr>'

        html += '</table><br>'
        return html
    
    def format_questions(self, group, questions_xml):
        """Format c√°c c√¢u h·ªèi"""
        group_of_q = []
        
        for para in group['questions']:
            if isinstance(para, Table):
                if group_of_q and group_of_q[-1]:
                    group_of_q[-1]['items'].append(para)
                continue
            
            text = para.text.strip().lower()
            
            # Ph√°t hi·ªán c√¢u h·ªèi m·ªõi
            if re.match(r'^c[√¢√¢]u.\d', text):
                question_tag = getattr(para, 'current_tag', None) or group.get('original_tag') or group['tag']
                question = {
                    'items': [para],
                    'question_tag': question_tag
                }
                group_of_q.append(question)
            elif group_of_q:
                group_of_q[-1]['items'].append(para)
        
        # X·ª≠ l√Ω t·ª´ng c√¢u h·ªèi
        for question_dict in group_of_q:
            each_question_xml = Element('question')
            
            # Metadata
            SubElement(each_question_xml, 'indexGroupQuestionMaterial').text = str(self.index_question)
            SubElement(each_question_xml, 'subject').text = group['subject']
            
            question_tag = question_dict['question_tag']
            SubElement(each_question_xml, 'tag').text = question_tag
            
            SubElement(each_question_xml, 'posttype').text = group['posttype']
            SubElement(each_question_xml, 'knowledgelevel').text = group['knowledgelevel']
            SubElement(each_question_xml, 'levelquestion').text = str(group['level'])
            
            # X·ª≠ l√Ω n·ªôi dung c√¢u h·ªèi
            self.protocol_of_q(question_dict['items'], each_question_xml, group['subject'])
            
            self.index_question += 1
            questions_xml.append(each_question_xml)

    def _get_image_tags_from_run(self, run):
            """
            T√¨m image references trong run._r (blip / v:imagedata),
            tr·∫£ v·ªÅ list tag <img src="data:..."/> (base64).
            """
            imgs = []
            try:
                # truy c·∫≠p v√†o ph·∫ßn XML th√¥ c·ªßa run
                r = run._r

                # 1) DrawingML blip (th∆∞·ªùng th·∫•y v·ªõi images ch√®n hi·ªán ƒë·∫°i)
                blips = r.xpath('.//a:blip', namespaces={'a': 'http://schemas.openxmlformats.org/drawingml/2006/main'})
                for blip in blips:
                    # attribute ch·ª©a relationship id
                    rId = blip.get('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}embed')
                    if rId:
                        img_tag = self._make_img_tag_from_rid(rId)
                        if img_tag:
                            imgs.append(img_tag)

                # 2) VML (c≈© h∆°n) - v:imagedata v·ªõi attribute r:id
                picts = r.xpath('.//v:imagedata', namespaces={'v': 'urn:schemas-microsoft-com:vml'})
                for pict in picts:
                    rId = pict.get('{http://schemas.openxmlformats.org/officeDocument/2006/relationships}id')
                    if rId:
                        img_tag = self._make_img_tag_from_rid(rId)
                        if img_tag:
                            imgs.append(img_tag)
            except Exception:
                # im l·∫∑ng n·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c l·ªói, tr√°nh crash
                pass

            return imgs

    def _make_img_tag_from_rid(self, rId):
        """
        D√πng rId ƒë·ªÉ l·∫•y image part t·ª´ self.doc.part.related_parts,
        tr·∫£ v·ªÅ m·ªôt th·∫ª <img src="data:..."> ho·∫∑c None.
        """
        try:
            # related_parts: mapping rId -> Part (ch·ª©a .blob v√† .content_type)
            part = self.doc.part.related_parts.get(rId)
            if not part:
                # c√≥ th·ªÉ relationship n·∫±m trong ph·ª• part (v√≠ d·ª• trong headers/footers),
                # th·ª≠ t√¨m m·ªçi part trong document (an to√†n h∆°n)
                for rel in self.doc.part.rels.values():
                    try:
                        target = getattr(rel, 'target_part', None)
                        if target and getattr(target, 'reltype', None) and 'image' in getattr(target, 'content_type', ''):
                            if rel.rId == rId:
                                part = target
                                break
                    except Exception:
                        continue

            if not part:
                # kh√¥ng t√¨m th·∫•y image part
                return None

            img_bytes = part.blob
            content_type = getattr(part, 'content_type', 'image/png')
            # encode base64
            b64 = base64.b64encode(img_bytes).decode('ascii')
            # hardcode width v√† height
            style = 'style="width:321px;height:214px;"'
            return f'<center><img src="data:{content_type};base64,{b64}" {style} /></center>'
        except Exception:
            return None
        
    def protocol_of_q(self, question, each_question_xml, subject):
        """Ph√¢n t√≠ch c·∫•u tr√∫c c√¢u h·ªèi"""
        # Chia th√†nh ph·∫ßn: n·ªôi dung c√¢u h·ªèi v√† l·ªùi gi·∫£i
        thanh_phan_1q = []
        
        for idx, para in enumerate(question):
            if idx == 0:
                thanh_phan_1q.append([para])
                continue
            
            if isinstance(para, Paragraph):
                text = para.text.strip().lower()
                if re.match(r'^l[·ªù·ªù]i gi[·∫£·∫£]i', text):
                    thanh_phan_1q.append([])
                    continue
            
            if thanh_phan_1q:
                thanh_phan_1q[-1].append(para)
        
        if len(thanh_phan_1q) < 2:
            raise ValueError(f"Thi·∫øu 'L·ªùi gi·∫£i' trong c√¢u: {question[0].text[:50]}")
        
        # Ph√¢n t√≠ch n·ªôi dung c√¢u h·ªèi v√† l·ªùi gi·∫£i
        thanh_phan_cau_hoi = []
        link_cau_hoi = []
        
        # X·ª≠ l√Ω links v√† n·ªôi dung
        for para in thanh_phan_1q[0]:
            if isinstance(para, Paragraph):
                text = para.text.strip()
                
                # Ph√°t hi·ªán Audio
                if text.startswith('Audio:'):
                    link_cau_hoi.append(text)
                    continue
                
                # Ph√°t hi·ªán URLs
                urls = re.findall(r'https?://[^\s]+', text)
                for url in urls:
                    if url not in link_cau_hoi:
                        link_cau_hoi.append(url)
                
                if urls and not text.replace(urls[0], '').strip():
                    continue
            
            thanh_phan_cau_hoi.append(para)
        
        # X·ª≠ l√Ω links
        self.xu_ly_link_cau_hoi(link_cau_hoi, each_question_xml)
        
        # Ph√¢n t√≠ch l·ªùi gi·∫£i
        thanh_phan_hdg = []
        link_speech_explain = []
        
        for idx, para in enumerate(thanh_phan_1q[1]):
            if idx == 0:
                thanh_phan_hdg.append([para])
                continue
            
            if isinstance(para, Paragraph):
                text = para.text.strip()
                
                if text.startswith('###'):
                    thanh_phan_hdg.append([])
                    continue
                
                # URLs trong HDG
                urls = re.findall(r'https?://[^\s]+', text)
                for url in urls:
                    link_speech_explain.append(url)
                    continue
            
            if thanh_phan_hdg:
                thanh_phan_hdg[-1].append(para)
        
        # X·ª≠ l√Ω urlSpeechExplain
        if link_speech_explain:
            if len(link_speech_explain) > 1:
                raise ValueError(f"HDG ch·ªâ ƒë∆∞·ª£c c√≥ 1 link TTS: {link_speech_explain}")
            
            if link_speech_explain[0].endswith(('.mp3', '.mp4')):
                SubElement(each_question_xml, 'urlSpeechExplain').text = link_speech_explain[0]
        
        # X√°c ƒë·ªãnh d·∫°ng c√¢u h·ªèi
        answer = thanh_phan_hdg[0][0].text.strip() if thanh_phan_hdg[0] else ''
        
        cau_sau_xu_ly = [thanh_phan_cau_hoi, thanh_phan_hdg]
        audio = [link for link in link_cau_hoi if 'Audio:' in link]
        
        # Routing theo subject
        if self.is_tinhoc_subject(subject):
            self.route_to_tinhoc_module(cau_sau_xu_ly, each_question_xml, audio, answer, subject)
        else:
            self.route_to_default_module(cau_sau_xu_ly, each_question_xml, audio, answer, subject)
    
    def is_tinhoc_subject(self, subject):
        """Ki·ªÉm tra c√≥ ph·∫£i m√¥n tin h·ªçc kh√¥ng"""
        return any(subject.startswith(tinhoc) for tinhoc in self.tinhoc_subjects)
    
    def route_to_tinhoc_module(self, cau_sau_xu_ly, xml, audio, answer, subject):
        """X·ª≠ l√Ω cho m√¥n Tin h·ªçc"""
        # ‚úÖ G·ªçi t·ª´ instance tinhoc_processor
        if re.match(r'^\d+', answer):
            if len(answer) > 1 and re.match(r'^[01]+', answer):
                self.tinhoc_processor.dang_ds_tinhoc(cau_sau_xu_ly, xml, audio, self.doc)
            else:
                self.tinhoc_processor.dang_tn_tinhoc(cau_sau_xu_ly, xml, audio, self.doc)
        elif answer.startswith('##'):
            self.dang_dt(cau_sau_xu_ly, xml, subject)
        else:
            self.dang_tl(cau_sau_xu_ly, xml, audio)
    
    def route_to_default_module(self, cau_sau_xu_ly, xml, audio, answer, subject):
        """X·ª≠ l√Ω cho m√¥n th√¥ng th∆∞·ªùng"""
        if re.match(r'^\d+', answer):
            if len(answer) > 1 and re.match(r'^[01]+', answer):
                self.dang_ds(cau_sau_xu_ly, xml, audio)
            else:
                self.dang_tn(cau_sau_xu_ly, xml, audio)
        elif answer.startswith('##'):
            self.dang_dt(cau_sau_xu_ly, xml, subject)
        else:
            self.dang_tl(cau_sau_xu_ly, xml, audio)
    
    def xu_ly_link_cau_hoi(self, links, xml):
        """X·ª≠ l√Ω links trong c√¢u h·ªèi"""
        one_tts = False
        one_media = False
        
        for link in links:
            if link.startswith('Audio:'):
                continue
            
            if link.endswith(('.mp3', '.mp4')):
                if one_tts:
                    raise ValueError(f"Ch·ªâ ƒë∆∞·ª£c 1 link TTS: {link}")
                SubElement(xml, 'urlSpeechContent').text = link
                one_tts = True
            else:
                if one_media:
                    raise ValueError(f"Ch·ªâ ƒë∆∞·ª£c 1 link Video: {link}")
                
                if 'vimeo.com' in link:
                    code = link.split('vimeo.com/')[1]
                    parts = code.split('/')
                    if len(parts) > 1:
                        code = f"{parts[0]}?h={parts[1].split('?share')[0]}"
                    else:
                        code = parts[0]
                    SubElement(xml, 'contentMedia').text = code
                    SubElement(xml, 'typeContentMedia').text = 'CodeVimeo'
                    one_media = True
                elif 'youtu' in link:
                    if 'watch?v=' in link:
                        code = link.split('watch?v=')[1]
                    elif 'youtu.be/' in link:
                        code = link.split('youtu.be/')[1].split('?')[0]
                    else:
                        continue
                    SubElement(xml, 'contentMedia').text = code
                    SubElement(xml, 'typeContentMedia').text = 'CodeYouTuBe'
                    one_media = True
    def convert_content_to_html(self, paragraphs):
        """
        Chuy·ªÉn list Paragraph / Table sang HTML ho√†n ch·ªânh, gi·ªØ table, ·∫£nh, math-latex.
        KH√îNG t·ª± b·ªçc <div class='content'> ƒë·ªÉ tr√°nh l·∫∑p.
        H·ªó tr·ª£ flatten ƒë·ªá quy: ch·∫•p nh·∫≠n paragraphs l√† Paragraph, Table,
        list/tuple l·ªìng nhau ·ªü b·∫•t k·ª≥ m·ª©c ƒë·ªô n√†o.
        """
        from docx.table import Table

        # ƒê·ªá quy flatten: tr·∫£ v·ªÅ list c√°c ph·∫ßn t·ª≠ kh√¥ng ph·∫£i list/tuple n·ªØa
        def _flatten(items):
            for it in items:
                if isinstance(it, (list, tuple)):
                    yield from _flatten(it)
                else:
                    yield it

        # N·∫øu ng∆∞·ªùi g·ªçi chuy·ªÅn 1 object kh√¥ng ph·∫£i iterable (v√≠ d·ª• m·ªôt Paragraph),
        # ta chu·∫©n h√≥a th√†nh list ƒë·ªÉ x·ª≠ l√Ω th·ªëng nh·∫•t.
        if paragraphs is None:
            flat = []
        elif isinstance(paragraphs, (list, tuple)):
            flat = list(_flatten(paragraphs))
        else:
            # M·ªôt ph·∫ßn t·ª≠ ƒë∆°n l·∫ª (c√≥ th·ªÉ l√† Paragraph ho·∫∑c Table)
            flat = [paragraphs]

        string_content = ""
        for para in flat:
            # B·∫£o v·ªá: n·∫øu para l√† None th√¨ b·ªè qua
            if para is None:
                continue

            # N·∫øu l√† Table (obj t·ª´ python-docx), x·ª≠ l√Ω ri√™ng
            if isinstance(para, Table):
                string_content += self.convert_table_to_html(para)
                string_content += "<br>"
                continue

            # N·∫øu l√† string (ƒë√£ chuy·ªÉn tr∆∞·ªõc ƒë√≥), th√™m tr·ª±c ti·∫øp
            if isinstance(para, str):
                string_content += para + "<br>"
                continue

            # M·ªôt s·ªë ƒë·ªëi t∆∞·ª£ng paragraph-like c√≥ th·ªÉ kh√¥ng ƒë·∫øn t·ª´ python-docx
            # nh∆∞ng c√≥ attribute 'runs' ‚Äî ki·ªÉm tra tr∆∞·ªõc khi g·ªçi convert_normal_paras
            new_children = []
            try:
                # N·∫øu paragraph kh√¥ng ph·∫£i object paragraph h·ª£p l·ªá, convert_normal_paras c√≥ th·ªÉ n√©m
                self.convert_normal_paras(para, 0, new_children)
                string_content += "".join(new_children)
            except TypeError:
                # Th·ª≠ g·ªçi convert_normal_paras theo ki·ªÉu c≈© (n·∫øu h√†m ƒë∆∞·ª£c thi·∫øt k·∫ø tr·∫£ v·ªÅ string/list)
                try:
                    res = self.convert_normal_paras(para)
                except Exception as e:
                    # N·∫øu v·∫´n l·ªói, chuy·ªÉn sang fallback: str(para)
                    string_content += str(para)
                else:
                    if isinstance(res, str):
                        string_content += res
                    elif isinstance(res, list):
                        string_content += "".join(res)
                    else:
                        string_content += str(res)
            except AttributeError:
                # Th∆∞·ªùng x·∫£y ra khi para l√† 1 list l·ªìng m√† ch∆∞a flatten ƒë√∫ng m·ª©c
                # Fallback robust: chuy·ªÉn th√†nh str(para)
                string_content += str(para)
            string_content += "<br>"

        # X·ª≠ l√Ω math-latex
        import re
        math_latex = re.compile(r"\$[^$]*\$")
        string_content = math_latex.sub(lambda m: f'<span class="math-tex">{m.group()}</span>', string_content)

        return string_content.strip()
    
    def dang_tn(self, cau_sau_xu_ly, xml, audio):
        """
        X·ª≠ l√Ω d·∫°ng Tr·∫Øc nghi·ªám (typeAnswer=0, template=0)
        Xu·∫•t ra XML chu·∫©n nh∆∞ m·∫´u:
        - contentquestion: text thu·∫ßn
        - listanswers: m·ªói answer c√≥ <p>...</p>
        - explainquestion: do hdg_tn() x·ª≠ l√Ω ri√™ng
        """
        import re
        from xml.etree.ElementTree import SubElement
        from docx.text.paragraph import Paragraph
        from docx.table import Table

        SubElement(xml, 'typeAnswer').text = '0'
        SubElement(xml, 'typeViewContent').text = '0'
        SubElement(xml, 'template').text = '0'

        # ===== 1Ô∏è‚É£ X·ª≠ l√Ω ph·∫ßn n·ªôi dung c√¢u h·ªèi =====
        content_part = []
        answers_part = []

        for para in cau_sau_xu_ly[0]:
            if isinstance(para, Paragraph):
                text = para.text.strip()
                # Ki·ªÉm tra xem c√≥ ph·∫£i ƒë√°p √°n (A./B./C./D.)
                if re.match(r'^[A-D]\.', text):
                    answers_part.append(para)
                else:
                    content_part.append(para)
            elif isinstance(para, Table):
                # Gi·ªØ nguy√™n b·∫£ng trong ph·∫ßn c√¢u h·ªèi
                content_part.append(para)

        # HTML c√¢u h·ªèi (gi·ªØ format c∆° b·∫£n, kh√¥ng b·ªçc <div>)
        content_html = self.convert_content_to_html(content_part)

        # N·∫øu c√≥ audio
        if audio and len(audio[0]) > 8:
            link = audio[0].replace('Audio:', '').strip()
            content_html += f'<audio controls=""><source src="{link}" type="audio/mpeg"></audio>'

        SubElement(xml, 'contentquestion').text = content_html.strip()

        # ===== 2Ô∏è‚É£ X·ª≠ l√Ω danh s√°ch ƒë√°p √°n =====
        listanswers = SubElement(xml, 'listanswers')

        # N·∫øu c√≥ ph·∫ßn th·ª© 2 trong cau_sau_xu_ly ch·ª©a th√¥ng tin ƒë√°p √°n ƒë√∫ng (c·ªù TRUE/FALSE)
        answer_flags = []
        if len(cau_sau_xu_ly) > 1 and cau_sau_xu_ly[1]:
            if isinstance(cau_sau_xu_ly[1][0], list):
                answer_flags = cau_sau_xu_ly[1][0]
            else:
                answer_flags = []

        for i, para in enumerate(answers_part):
            # B·ªè prefix A./B./C./D.
            text = re.sub(r'^[A-D]\.\s*', '', para.text.strip())
            content_html = f'<p>{text}</p>'

            answer_el = SubElement(listanswers, 'answer')
            SubElement(answer_el, 'index').text = str(i)
            SubElement(answer_el, 'content').text = content_html

            # ƒê√°nh d·∫•u ƒë√∫ng/sai (n·∫øu c√≥ c·ªù)
            is_true = 'FALSE'
            if answer_flags:
                if chr(65 + i) in answer_flags or str(i) in answer_flags:
                    is_true = 'TRUE'
            SubElement(answer_el, 'isanswer').text = is_true

        # Ph·∫ßn explainquestion (h∆∞·ªõng d·∫´n gi·∫£i) t√°ch sang hdg_tn()
        self.hdg_tn(cau_sau_xu_ly[1] if len(cau_sau_xu_ly) > 1 else None, xml)
        
        def list_answers_tn(self, content, answer_para, xml):
            """T·∫°o danh s√°ch ƒë√°p √°n TN, b·ªè prefix A./B./C./D. v√† KH√îNG b·ªçc <div class='content'>."""
            import re
            multiple_choices = []
            for array_para in content:
                choice_html = self.convert_content_to_html(array_para if isinstance(array_para, list) else [array_para])
                # B·ªè prefix A. B. C. D. n·∫øu c√≥ (ƒë·∫ßu c√¢u)
                choice_html = re.sub(r"^(<[^>]+>)*\s*[A-Za-z][\.\)]\s*", "", choice_html)
                multiple_choices.append(choice_html.strip())

            # L·∫•y ƒë√°p √°n ƒë√∫ng
            if isinstance(answer_para, list) and len(answer_para) > 0:
                answer_text = answer_para[0].text.strip()
            else:
                answer_text = answer_para.text.strip()
            number_of_answer = [c for c in answer_text if c.isdigit()]

            listanswers = SubElement(xml, 'listanswers')
            for i, choice in enumerate(multiple_choices):
                answer = SubElement(listanswers, 'answer')
                SubElement(answer, 'index').text = str(i)
                content_elem = SubElement(answer, 'content')
                # Kh√¥ng b·ªçc <div> n·ªØa, ch·ªâ gi·ªØ n·ªôi dung HTML thu·∫ßn
                content_elem.text = choice
                is_correct = 'TRUE' if str(i + 1) in number_of_answer else 'FALSE'
                SubElement(answer, 'isanswer').text = is_correct

    # H√†m ti·ªán √≠ch lo·∫°i b·ªè th·∫ª HTML
    import re
    def strip_html(self, html_text):
        # Lo·∫°i b·ªè t·∫•t c·∫£ th·∫ª <...>
        text = re.sub(r'<[^>]+>', '', html_text)
        # Lo·∫°i b·ªè c√°c kho·∫£ng tr·∫Øng th·ª´a
        text = text.strip()
        return text
    
    def hdg_tn(self, array_hdg, xml):
        """
        H∆∞·ªõng d·∫´n gi·∫£i TN, gi·ªØ HTML (·∫£nh/table)
        T·ª± ƒë·ªông th√™m "ƒê√°p √°n ƒë√∫ng l√†: ..." n·∫øu c√≥ th√¥ng tin
        """
        import re
        from xml.etree.ElementTree import SubElement

        if not array_hdg:
            return

        # X√≥a th·∫ª explainquestion c≈© n·∫øu c√≥
        existing_explain = xml.find('explainquestion')
        if existing_explain is not None:
            xml.remove(existing_explain)

        explain_text = ''
        answer_letters = ['A', 'B', 'C', 'D']

        # ===== 1Ô∏è‚É£ T√¨m ƒë√°p √°n ƒë√∫ng t·ª´ ph·∫ßn h∆∞·ªõng d·∫´n =====
        index_answer = []
        hdg_raw = ''

        # Tr∆∞·ªùng h·ª£p array_hdg ch·ª©a list c·ªßa Paragraphs, ho·∫∑c nested list
        if isinstance(array_hdg, list):
            for part in array_hdg:
                if hasattr(part, "text"):
                    hdg_raw += part.text.strip() + " "
                elif isinstance(part, list):
                    for p in part:
                        if hasattr(p, "text"):
                            hdg_raw += p.text.strip() + " "

        # T√¨m s·ªë (1,2,3,...) ho·∫∑c ch·ªØ c√°i (A-D)
        index_answer = [int(ch) for ch in re.findall(r'\d+', hdg_raw)]
        if index_answer:
            dap_an = ' '.join(answer_letters[i - 1] for i in index_answer if 1 <= i <= len(answer_letters))
            explain_text = f"ƒê√°p √°n ƒë√∫ng l√†: {dap_an}"
        else:
            match = re.search(r"([A-D])", hdg_raw, re.IGNORECASE)
            if match:
                explain_text = f"ƒê√°p √°n ƒë√∫ng l√†: {match.group(1).upper()}"

        # ===== 2Ô∏è‚É£ N·∫øu c√≥ n·ªôi dung h∆∞·ªõng d·∫´n th·ª±c s·ª± (gi·∫£i th√≠ch chi ti·∫øt)
        hdg_html = self.convert_content_to_html(array_hdg)
        plain = re.sub(r'<[^>]+>', '', hdg_html).strip()

        if len(plain) > 4:
            # N·∫øu c√≥ h∆∞·ªõng d·∫´n th·∫≠t, ∆∞u ti√™n h∆°n
            explain_text = hdg_html

        SubElement(xml, 'explainquestion').text = explain_text.strip()
        
    def dang_ds(self, cau_sau_xu_ly, xml, audio):
        """X·ª≠ l√Ω d·∫°ng ƒê√∫ng/Sai, t√°ch ƒë√∫ng ph·∫ßn ph√°t bi·ªÉu v√† HDG"""
        SubElement(xml, 'typeAnswer').text = '1'
        SubElement(xml, 'typeViewContent').text = '0'
        SubElement(xml, 'template').text = '0'

        import re
        paragraphs = cau_sau_xu_ly[0]
        statements = []
        intro_paras = []

        # ‚úÖ Ph√¢n lo·∫°i ph·∫ßn m·ªü ƒë·∫ßu v√† c√°c ph√°t bi·ªÉu
        for para in paragraphs:
            if isinstance(para, Paragraph) and re.match(r'^[a-d]\s*[\.\)]', para.text.strip(), re.IGNORECASE):
                statements.append(para)
            else:
                intro_paras.append(para)

        # ‚úÖ Ph·∫ßn m·ªü ƒë·∫ßu (m√¥ t·∫£ t√¨nh hu·ªëng)
        content_html = self.convert_content_to_html(intro_paras)
        if audio and len(audio[0]) > 8:
            link = audio[0].replace('Audio:', '').strip()
            content_html += f'<audio controls=""><source src="{link}" type="audio/mpeg"></audio>'
        SubElement(xml, 'contentquestion').text = content_html

        # ‚úÖ Danh s√°ch ph√°t bi·ªÉu a/b/c/d
        listanswers = SubElement(xml, 'listanswers')
        for i, para in enumerate(statements):
            ans_html = self.convert_content_to_html([para])
            # --- B·ªè prefix a) / b. / c) / d) (k·ªÉ c·∫£ c√≥ tag HTML) ---
            ans_html = re.sub(
                r'^\s*(<[^>]+>)*\s*([A-Da-d])\s*[\.\)]\s*',
                '',
                ans_html
            )
            # c≈©ng b·ªè tr∆∞·ªùng h·ª£p prefix n·∫±m trong th·∫ª <strong> ho·∫∑c <b>
            ans_html = re.sub(
                r'^(<strong>|<b>)?\s*([A-Da-d])[\.\)]\s*(</strong>|</b>)?',
                '',
                ans_html
            )

            answer = SubElement(listanswers, 'answer')
            SubElement(answer, 'index').text = str(i)
            SubElement(answer, 'content').text = ans_html
            SubElement(answer, 'isanswer').text = 'FALSE'  # t·∫°m th·ªùi FALSE, s·∫Ω c·∫≠p nh·∫≠t sau

        # ‚úÖ L·∫•y chu·ªói ƒë√°p √°n ƒë√∫ng/sai (v√≠ d·ª•: 0111, 1010, ...)
        if len(cau_sau_xu_ly[1]) > 0:
            if isinstance(cau_sau_xu_ly[1][0], list):
                ans_text = cau_sau_xu_ly[1][0][0].text.strip()
            else:
                ans_text = cau_sau_xu_ly[1][0].text.strip()
            for i, ch in enumerate(ans_text):
                if i < len(listanswers):
                    listanswers[i].find('isanswer').text = 'TRUE' if ch == '1' else 'FALSE'

        # ‚úÖ H∆∞·ªõng d·∫´n gi·∫£i (HDG)
        if len(cau_sau_xu_ly[1]) > 1:
            flat_hdg = []
            for item in cau_sau_xu_ly[1][1:]:
                if isinstance(item, list):
                    flat_hdg.extend(item)
                else:
                    flat_hdg.append(item)
            hdg_html = self.convert_content_to_html(flat_hdg)
        else:
            hdg_html = ''

        SubElement(xml, 'explainquestion').text = hdg_html
    

    def dang_dt(self, cau_sau_xu_ly, xml, subject):
        """
        D·∫°ng ƒëi·ªÅn ƒë√°p √°n (typeAnswer=5) - r√∫t g·ªçn, kh√¥ng d√πng normalize/unescape.
        T√¨m ƒë√°p √°n tr·ª±c ti·∫øp t·ª´ [[...]] r·ªìi x√¢y XML ƒë√∫ng format (contentquestion, listanswers, explainquestion).
        """
        # ===== 1. Meta =====
        SubElement(xml, 'typeAnswer').text = '5'
        SubElement(xml, 'typeViewContent').text = '0'
        SubElement(xml, 'template').text = '23'

        # ===== 2. Hint (n·∫øu c√≥) =====
        if len(cau_sau_xu_ly) > 1 and isinstance(cau_sau_xu_ly[1], list) and len(cau_sau_xu_ly[1]) > 1:
            hint_html = self.convert_b4_add(cau_sau_xu_ly[1][1])
            SubElement(xml, 'hintQuestion').text = hint_html

        # ===== 3. L·∫•y n·ªôi dung g·ªëc v√† t√¨m ƒë√°p √°n [[...]] t·ª´ ƒë√≥ =====
        raw_html = self.convert_b4_add(cau_sau_xu_ly[0])  # n·ªôi dung g·ªëc c√≥ th·ªÉ ch·ª©a [[...]]
        # chu·∫©n h√≥a <br/>
        raw_html = re.sub(r'<br\s*/?>', '<br/>', raw_html)

        # t√¨m m·ªçi bi·ªÉu th·ª©c [[...]] trong raw_html (gi·ªØ nguy√™n n·ªôi dung gi·ªØa [[ ]])
        found_answers = re.findall(r'\[\[(.*?)\]\]', raw_html, flags=re.DOTALL)
        # trim t·ª´ng answer
        dap_an_dt = [a.strip() for a in found_answers if a.strip()]

        # ===== 4. Lo·∫°i b·ªè c√°c d√≤ng ti√™u ƒë·ªÅ / "ƒê√°p √°n:" v√† lo·∫°i b·ªè [[...]] kh·ªèi n·ªôi dung hi·ªÉn th·ªã =====
        # T√°ch theo <br/> ƒë·ªÉ gi·ªØ c·∫•u tr√∫c gi·ªëng tr∆∞·ªõc
        lines = [ln.strip() for ln in raw_html.split('<br/>')]

        filtered = []
        for ln in lines:
            if not ln:
                continue
            # b·ªè c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng ti√™u ƒë·ªÅ ho·∫∑c "ƒê√°p √°n" (c√°c d·∫°ng c√≥ th·ªÉ xu·∫•t hi·ªán)
            if ln.startswith("ƒêi·ªÅn ƒë√°p √°n") or ln.startswith("ƒê√°p √°n") or ln.startswith("ƒê√°p √°n:"):
                continue
            # lo·∫°i b·ªè m·ªçi [[...]] c√≤n l·∫°i
            ln_clean = re.sub(r'\[\[.*?\]\]', '', ln)
            ln_clean = ln_clean.strip()
            if ln_clean:
                filtered.append(ln_clean)

        # ===== 5. D·ª±ng ph·∫ßn contentquestion (title + content + answer-input) =====
        title_html = '<div class="title">ƒêi·ªÅn ƒë√°p √°n th√≠ch h·ª£p v√†o √¥ tr·ªëng (ch·ªâ s·ª≠ d·ª•ng ch·ªØ s·ªë, d·∫•u \",\" v√† d·∫•u \"-\")</div>'
        content_block = '<div class="content">' + '<br/>'.join(filtered) + '</div>'
        answer_input_html = (
            '<div class="answer-input">'
            '<div class="line">ƒê√°p √°n: <span class="ans-span-second"></span>'
            '<input class="can-resize-second" type="text" id="mathplay-answer-1"/></div></div>'
        )

        full = title_html + content_block + answer_input_html
        SubElement(xml, 'contentquestion').text = full

        # ===== 6. T·∫°o listanswers ƒë√∫ng format (n·∫øu c√≥ ƒë√°p √°n) =====
        if dap_an_dt:
            listanswers = SubElement(xml, 'listanswers')
            for i, ans in enumerate(dap_an_dt):
                # ans c√≥ th·ªÉ l√† "56,3" ho·∫∑c "3" etc. gi·ªØ nguy√™n nh∆∞ ng∆∞·ªùi nh·∫≠p
                answer = SubElement(listanswers, 'answer')
                SubElement(answer, 'index').text = str(i)
                SubElement(answer, 'content').text = ans
                SubElement(answer, 'isanswer').text = 'TRUE'

            # ===== 7. explainquestion =====
            SubElement(xml, 'explainquestion').text = f"ƒê√°p √°n ƒë√∫ng theo th·ª© t·ª± l√†: {', '.join(dap_an_dt)}"
        else:
            # kh√¥ng c√≥ ƒë√°p √°n: kh√¥ng t·∫°o listanswers v√† explainquestion
            pass



                
    def dang_tl(self, cau_sau_xu_ly, xml, audio):
            """X·ª≠ l√Ω d·∫°ng T·ª± lu·∫≠n, gi·ªØ table/·∫£nh trong content v√† HDG"""
            SubElement(xml, 'typeAnswer').text = '3'
            SubElement(xml, 'typeViewContent').text = '0'
            SubElement(xml, 'template').text = '0'

            # Content
            content_html = self.convert_content_to_html(cau_sau_xu_ly[0])
            if audio and len(audio[0]) > 8:
                link = audio[0].replace('Audio:', '').strip()
                content_html += f'<audio controls=""><source src="{link}" type="audio/mpeg"></audio>'
            SubElement(xml, 'contentquestion').text = content_html

            # List answers placeholder
            listanswers = SubElement(xml, 'listanswers')
            answer = SubElement(listanswers, 'answer')
            SubElement(answer, 'index').text = '0'
            SubElement(answer, 'content').text = 'REPLACELATER'
            SubElement(answer, 'isanswer').text = 'TRUE'

            # HDG
            hdg_html = self.convert_content_to_html(cau_sau_xu_ly[1]) if len(cau_sau_xu_ly) > 1 else ''
            SubElement(xml, 'explainquestion').text = hdg_html
    
    def convert_b4_add(self, paragraphs):
        """X·ª≠ l√Ω danh s√°ch paragraph th√†nh HTML (gi·ªëng GAS ConvertB4Add)"""
        # string_content = ""
        # for index, paragraph in enumerate(paragraphs):
        #     new_children = []

        #     if paragraph._element.tag.endswith('tbl'):
        #         html_table = self.convert_table_to_html(paragraph)
        #         new_children.append(html_table)
        #     else:
        #         self.convert_normal_paras(paragraph, index, new_children)

        #     new_content = "".join(new_children)
        #     if len(paragraphs) > 1:
        #         string_content += f"{new_content}<br>"
        #     else:
        #         string_content += new_content
        # string_content = '<div class="content">'
        string_content = '<p>'
        for index, paragraph in enumerate(paragraphs):
            new_children = []

            # if paragraph._element.tag.endswith('tbl'):
            #     html_table = self.convert_table_to_html(paragraph)
            #     new_children.append(html_table)
            if isinstance(paragraph, Table):
                html_table = self.convert_table_to_html(paragraph)
                new_children.append(html_table)
            else:
                self.convert_normal_paras(paragraph, index, new_children)

            new_content = "".join(new_children)
            string_content += f"{new_content}<br>"

        # string_content += "</div>"
        string_content += "</p>"

        # X·ª≠ l√Ω math-latex: $...$
        import re
        math_latex = re.compile(r"\$[^$]*\$")
        string_content = math_latex.sub(lambda m: f' <span class="math-tex">{m.group()}</span>', string_content)

        return string_content
    
    def convert_normal_paras(self, paragraph, index, new_children):
        """Chuy·ªÉn 1 paragraph sang HTML, b·ªè ph·∫ßn ƒë·∫ßu (C√¢u, HL, A/B/C/D) v√† gi·ªØ format,
        b√¢y gi·ªù h·ªó tr·ª£ c·∫£ sup v√† sub gi·ªëng convert_paragraph_to_html()"""
        raw_text = "".join(run.text for run in paragraph.runs or [])

        # ‚úÖ B∆∞·ªõc 1: X√°c ƒë·ªãnh v·ªã tr√≠ b·∫Øt ƒë·∫ßu th·ª±c s·ª± c·ªßa n·ªôi dung
        import re
        content_start_pos = 0
        if index == 0:
            cau_match = re.match(r"^C[√¢a]u\s*\d+[\.:]\s*", raw_text, re.IGNORECASE)
            if cau_match:
                content_start_pos = cau_match.end()

        hl_match = re.match(r"^HL:\s*", raw_text[content_start_pos:], re.IGNORECASE)
        if hl_match:
            content_start_pos += hl_match.end()

        answer_match = re.match(r"^([A-D])\.\s*", raw_text[content_start_pos:], re.IGNORECASE)
        if answer_match:
            content_start_pos += answer_match.end()

        html_content = ""
        prev_style = None
        buffer = ""
        current_text_pos = 0

        # Duy·ªát qua t·ª´ng run, x·ª≠ l√Ω c·∫Øt theo content_start_pos v√† gom theo style (bao g·ªìm sup/sub)
        for run in paragraph.runs:
            full_text = run.text or ""
            text_start = current_text_pos
            text_end = current_text_pos + len(full_text)

            # N·∫øu to√†n b·ªô ph·∫ßn n√†y n·∫±m tr∆∞·ªõc content start th√¨ b·ªè qua
            if text_end <= content_start_pos:
                current_text_pos = text_end
                continue

            # N·∫øu ph·∫ßn b·∫Øt ƒë·∫ßu n·∫±m tr∆∞·ªõc content_start_pos th√¨ c·∫Øt ph·∫ßn ph√≠a tr∆∞·ªõc
            if text_start < content_start_pos:
                slice_start = content_start_pos - text_start
                segment_text = full_text[slice_start:]
            else:
                segment_text = full_text

            # Build style tuple gi·ªëng convert_paragraph_to_html
            style = (
                bool(run.bold),
                bool(run.italic),
                bool(run.underline),
                bool(getattr(run.font, 'superscript', False)),
                bool(getattr(run.font, 'subscript', False)),
            )

            # N·∫øu kh√°c style hi·ªán t·∫°i -> flush buffer
            if prev_style is not None and style != prev_style:
                # d√πng wrap_style ƒë·ªÉ ƒë√≥ng/g√≥i buffer theo prev_style
                html_content += self.wrap_style(self.escape_html(buffer), prev_style)
                buffer = ""

            buffer += segment_text
            prev_style = style
            current_text_pos = text_end

        # flush buffer cu·ªëi c√πng
        if buffer:
            html_content += self.wrap_style(self.escape_html(buffer), prev_style)

        # Th√™m ·∫£nh n·∫øu c√≥ (gi·ªØ nguy√™n logic c≈©)
        for run in paragraph.runs:
            blips = run._element.xpath(
                './/*[local-name()="blip" and namespace-uri()="http://schemas.openxmlformats.org/drawingml/2006/main"]'
            )
            if blips:
                try:
                    rId_nodes = run._element.xpath(
                        './/*[local-name()="blip"]/@*[local-name()="embed"]'
                    )
                    if rId_nodes:
                        rId = rId_nodes[0]
                        img_tag = self._make_img_tag_from_rid(rId)
                        if img_tag:
                            html_content += img_tag
                except Exception:
                    pass

        # trim v√† append v√†o new_children
        new_children.append(html_content.strip())
    
    def escape_html(self, text):
        """Escape HTML entities"""
        return (text
            .replace('&', '&amp;')
            .replace('<', '&lt;')
            .replace('>', '&gt;')
            .replace('"', '&quot;')
            .replace("'", '&#039;'))
    
    def prettify_xml(self, elem):
        """T·∫°o XML ƒë·∫πp v·ªõi indentation"""

        rough_string = tostring(elem, encoding='utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="  ", encoding='UTF-8').decode('utf-8')
    
    def post_process_xml(self, xml_str):
        """
        X·ª≠ l√Ω XML t∆∞∆°ng t·ª± logic c·ªßa h√†m TaoFile(root) b√™n Google Apps Script
        - Chuy·ªÉn ƒë·ªïi c√°c k√Ω t·ª± HTML encode v·ªÅ th·∫ª th·∫≠t
        - L√†m s·∫°ch n·ªôi dung trong <span class="math-tex">
        - Gi·ªØ nguy√™n c·∫•u tr√∫c XML v√† format ƒë·∫πp
        """

        import re
        from xml.dom import minidom

        # ƒê·∫£m b·∫£o header XML ƒë√∫ng
        xml_str = xml_str.replace('<?xml version="1.0" ?>', '<?xml version="1.0" encoding="UTF-8"?>')

        # === CORRECTION L·∫¶N 1 ===
        correction = {
            'REPLACELATER': '',
            '&lt;br&gt;': '<br>',
            '&lt;em&gt;': '<em>',
            '&lt;/em&gt;': '</em>',
            '&lt;u&gt;': '<u>',
            '&lt;/u&gt;': '</u>',
            '&lt;strong&gt;': '<strong>',
            '&lt;/strong&gt;': '</strong>',
            '&lt;/font&gt;': '</font>',
            '&lt;font': '<font',
            '&lt;span': '<span',
            '&lt;/span&gt;': '</span>',
            '&lt;input': '<input',
            '"&gt;': '">',
            '&lt;/div&gt;': '</div>',
            '&lt;div': '<div',
            '&#xD;': '',
            '&lt;label': '<label',
            '&lt;select': '<select',
            '&lt;option': '<option',
            'hidden&gt;': 'hidden>',
            '&lt;/option&gt;': '</option>',
            '&lt;/select&gt;': '</select>',
            '&lt;/label&gt;': '</label>',
            '&quot;': '"',
            '&lt;center&gt;': '<center>',
            '&lt;/center&gt;': '</center>',
            '&lt;p&gt;': '<p>',
            '&lt;/p&gt;': '</p>',
            '&lt;img': '<img',
            ' /&gt;': ' />',
            '&amp;': '&',
            '&lt;audio': '<audio',
            '&lt;/audio&gt;': '</audio>',
            '&lt;source': '<source',
            '&lt;blockquote&gt;': '<blockquote>',
            '&lt;/blockquote&gt;': '</blockquote>',
            '&lt;table&gt;': '<table>',
            '&lt;/table&gt;': '</table>',
            '&lt;tr&gt;': '<tr>',
            '&lt;/tr&gt;': '</tr>',
            '&lt;td&gt;': '<td>',
            '&lt;/td&gt;': '</td>',
            '&lt;/li&gt;': '</li>',
            '&lt;li&gt;': '<li>',
        }

        for key, val in correction.items():
            xml_str = re.sub(re.escape(key), val, xml_str)

        # === CORRECTION L·∫¶N 2 ===
        second_correction = {
            '&lt;i&gt;': '<i>',
            '&lt;/i&gt;': '</i>',
            '&lt;u&gt;': '<u>',
            '&lt;/u&gt;': '</u>',
            '&lt;strong&gt;': '<strong>',
            '&lt;/strong&gt;': '</strong>',
            '&lt;sub&gt;': '<sub>',
            '&lt;/sub&gt;': '</sub>',
            '&lt;sup&gt;': '<sup>',
            '&lt;/sup&gt;': '</sup>',
        }

        for key, val in second_correction.items():
            xml_str = re.sub(re.escape(key), val, xml_str)

        # === X·ª¨ L√ù MATHLATEX ===
        def clean_mathlatex(match):
            mathlatex = match.group(0)
            # B·ªè c√°c style trong math
            mathlatex = (
                mathlatex
                .replace('<strong>', '')
                .replace('</strong>', '')
                .replace('<i>', '')
                .replace('</i>', '')
                .replace('<u>', '')
                .replace('</u>', '')
                .replace('<br>', '')
                .replace('%', '\\%')
                .replace('\\frac', '\\dfrac')
            )
            return mathlatex

        xml_str = re.sub(
            r'<span class="math-tex">(.*?)</span>',
            clean_mathlatex,
            xml_str,
            flags=re.DOTALL
        )

        # === G·ª¢I √ù: KH√îNG ƒê·ª§NG ƒê·∫æN P-TAG ·ªû ƒê√ÇY ===
        # (Google Apps Script code kh√¥ng ch·ªânh <p>, n√™n kh√¥ng th√™m x·ª≠ l√Ω t·ª± ƒë·ªông n√†y)

        # === L√ÄM ƒê·∫∏P L·∫†I XML ===
        try:
            xml_str = minidom.parseString(xml_str).toprettyxml(indent="  ", encoding="UTF-8").decode("utf-8")
        except Exception:
            # N·∫øu XML l·ªói c√∫ ph√°p (do ch·ª©a < ho·∫∑c & kh√¥ng h·ª£p l·ªá)
            # th√¨ v·∫´n tr·∫£ b·∫£n g·ªëc, tr√°nh crash
            pass
        xml_str = xml_str.replace('&lt;', '<').replace('&gt;', '>').replace('&amp;', '&')
        # === L∆ØU FILE ===
        file_name = "docXML.xml"
        if "<itemDocuments>" in xml_str:
            file_name = "docHL.xml"

        # T√πy v√†o h·ªá th·ªëng c·ªßa b·∫°n ‚Äî v√≠ d·ª• ghi ra th∆∞ m·ª•c output
        with open(file_name, "w", encoding="utf-8") as f:
            f.write(xml_str)

        return xml_str